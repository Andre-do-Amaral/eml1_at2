stages:
  - build
  - test
  - run

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  
cache:
  paths:
    - .cache/pip
    - .venv
    - ~/.cache/pypoetry
    - ~/.cache/pip

build_image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - |
      echo "USER -> $CI_REGISTRY_USER"
      echo "PASSWORD -> $CI_REGISTRY_PASSWORD"
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - |
      echo "USER -> $CI_REGISTRY_USER"
      echo "PASSWORD -> $CI_REGISTRY_PASSWORD"
      docker build -t "${CI_REGISTRY_IMAGE%/}/$CI_COMMIT_REF_SLUG:${CI_COMMIT_REF_SLUG:-latest}" .
      docker push "${CI_REGISTRY_IMAGE%/}/$CI_COMMIT_REF_SLUG:${CI_COMMIT_REF_SLUG:-latest}"

  only:
    - merge_requests
    - master
    - release
    - /^feature\/.*$/

unit_tests:
  stage: test
  image: python:3.12
  tags:
    - feature
  before_script:
    - pip install --upgrade pip
    - pip install poetry
    - poetry install --no-root
  script:
    - poetry run pytest tests/
  only:
    - /^feature\/.*$/

# Executa o MLflow server (pode ser para testes manuais ou integração)
run_mlflow:
  stage: run
  image: docker:latest
  services:
    - docker:dind
  script:
    - |
      echo "USER -> $CI_REGISTRY_USER"
      echo "PASSWORD -> $CI_REGISTRY_PASSWORD"
      docker run -d -p 5000:5000 "$IMAGE_NAME"
  only:
    - release

# Executa o script "main.py evaluate"
run_script:
  stage: run
  image: docker:latest
  services:
    - docker:dind
  script:
    - |
      echo "USER -> $CI_REGISTRY_USER"
      echo "PASSWORD -> $CI_REGISTRY_PASSWORD"
      docker run --rm "$IMAGE_NAME" poetry run python src/main.py evaluate
  only:
    - release

skip_main:
  stage: test
  tags:
    - ci
  script:
    - echo "Nada é executado na main"
  only:
    - master
